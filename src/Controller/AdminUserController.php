<?php

declare(strict_types=1);

namespace App\Controller;


use App\Entity\User;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Container\ContainerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Attribute\AsController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Contracts\Service\Attribute\Required;

#[AsController]
class AdminUserController extends AbstractController
{
    public function __construct(
        private readonly UserRepository $userRepository,
        private readonly EntityManagerInterface $entityManager
    ) {
    }
    #[Route("/admin/useroverview", name: 'adminUserOverview')]
    public function entry(): Response
    {
        $allUser = $this->userRepository->findAll();
        return $this->render('admin/userOverview.html.twig', ['allUser' => $allUser]);
    }
    #[Route("/admin/createUser", name: 'adminCreateUser')]
    public function createNewUser(Request $request): Response
    {
        $newUser = new User;
        $newUserForm = $this->createForm(NewUserFormType::class, $newUser);
        $newUserForm->handleRequest($request);

        if ($newUserForm->isSubmitted() && $newUserForm->isValid()) {
            $this->entityManager->persist($newUser);
            $this->entityManager->flush();
           return $this->redirectToRoute('adminUserOverview');
        }
        return $this->render('admin/createNewUser.html.twig', [
            'newUserForm' => $newUserForm->createView(),
        ]);
    }
    #[Route("/admin/user/{userId}", name: "adminSaveUserData")]
    public function saveChangedUserData(Request $request, $userId): Response
    {
        $findUser = $this->userRepository->findBy(['id' => $userId]);
        $user = new User();
        $saveUser = $this->createForm(SaveUserFormType::class, $user );
        $saveUser->handleRequest($request);
        if ($saveUser->isSubmitted() && $saveUser->isValid()) {
            $editedUser = $this->userRepository->find(["id" => $userId]);
            $editedUser->setEmail($saveUser->get('email')->getData());
            $editedUser->setPassword($saveUser->get('password')->getData());
            $this->userRepository->save($editedUser, true);
            return $this->redirectToRoute('adminMainMenu');
        }
        return $this->render('admin/user.html.twig', ['saveUser' => $saveUser->createView(), 'users' => $findUser]);
    }

    #[Required] public function setContainer(ContainerInterface $container): ?ContainerInterface
    {
        return parent::setContainer($container); // TODO: Change the autogenerated stub
    }
    #[Route("/admin/user/delete/{userId}", name:"adminUserDelete")]
    public function deleteProduct($userId):Response
    {
        $singleUser = $this->userRepository->find($userId);
        $this->entityManager->remove($singleUser);
        $this->entityManager->flush();
        $allUser = $this->userRepository->findAll();
        return $this->render('admin/userOverview.html.twig', ['allUser' => $allUser]);
    }
}